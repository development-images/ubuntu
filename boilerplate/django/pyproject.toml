[tool.poetry]
name = "My Django Package"
description = "Example Django Project"
authors = ["Me <me@example.com>"]
version = "1.0.0"
readme = "README.md"
homepage = "https://example.com"
repository = "https://github.com/example/example"
package-mode = false

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0"]

[tool.poetry.dependencies]
# Python version required
python = "^3.12"

# Django core
Django = "^5.0.3"

# Django requirements
asgiref = "^3.7.2"
pytz = "^2024.1"
sqlparse = "^0.4.4"
uritemplate = "^4.1.1"
whitenoise = "^6.6.0"

# Django common extensions
django-filter = "^24.1"
django-guardian = "^2.4.0"
django-netfields = "^1.3.2"
django-taggit = "^5.0.1"

# Redis connectivity
django-redis = "^5.4.0"

# Django Ninja for API support
django-ninja = "^1.1.0"

# Configuration loading from environment files/variables
environs = {version ="^11.0.0", extras = ["django"]}

# Password hashers
argon2-cffi = "^23.1.0"
bcrypt = "^4.1.2"

# Django development tools
django-debug-toolbar = "^4.3.0"
django-extensions = "^3.2.3"
Faker = "^22.1.0"

# Postgres database driver (compiled C version)
psycopg = {version = "^3.1.18", extras = ["c","pool"]}
# If required, you can switch to the pre-compiled binary version
# psycopg = {version = "^3.1.18", extras = ["binary","pool"]}

# Optional tools for Django
jsmin = "^3.0.1"
orjson = "^3.9.10"

# Web server
hypercorn = {version ="^0.16.0", extras = ["h3"]}
werkzeug = "^3.0.1"

# APM
sentry-sdk = {version = "^1.42.0", optional = true}

[tool.poetry.extras]
sentry = [
  "sentry-sdk",
]
full = [
  "sentry-sdk",
]

# Declare the below groups as optional
[tool.poetry.group.dev]
optional = true

[tool.poetry.group.format]
optional = true

[tool.poetry.group.test]
optional = true

[tool.poetry.group.typing]
optional = true

[tool.poetry.group.dev.dependencies]
# Packages for linting
pycodestyle = "^2.11.1"
pylint = "^3.0.3"
pylint-django = "^2.5.5"
pylint-pydantic = "^0.3.2"
ruff = "^0.1.15"
semgrep = "^1.59.1"

# Misc other development tools
Cython = "^3.0.8"
devtools = {extras = ["pygments"], version = "^0.12.2"}
ipython = "^8.21.0"
Markdown = "^3.5.2"
pipenv = "^2023.12.1"
rich = "^13.7.0"
pywatchman = "^1.4.1"

# Define the packages for the optional groups
[tool.poetry.group.format.dependencies]
# Packages for code formatting
autopep8 = "^2.0.4"
black = "^24.1.1"
flake8 = "^7.0.0"

[tool.poetry.group.test.dependencies]
# Packages for testing
hypothesis = {extras = ["cli"], version = "^6.98.2"}
pytest = "^8.0.0"
pytest-django = "^4.8.0"
pytest-html = "^4.1.1"

[tool.poetry.group.typing.dependencies]
# Packages for type checking
mypy = "^1.8.0"
pyre-check = "^0.9.19"

# Extensions for type checking
django-stubs = {extras = ["compatible-mypy"], git = "https://github.com/typeddjango/django-stubs.git", branch = "master"}
django-stubs-ext = {git = "https://github.com/typeddjango/django-stubs.git", subdirectory = "ext", branch = "master"}
types-pyyaml = "^6.0.12.12"
types-requests = "^2.31.0.20240125"
types-tabulate = "^0.9.0"

[tool.autopep8]
# Raise default maximum line length
max_line_length = 120

[tool.flake8]
# Raise default maximum line length
max-line-length = 120

[tool.pylint.MASTER]
ignore = [
  "migrations"
]
load-plugins = [
  "pylint_django"
]

[tool.pylint.'MESSAGES CONTROL']
disable = [
  "consider-using-f-string"
]
extension-pkg-whitelist = "pydantic"
max-line-length = 120

[tool.ruff]
line-length = 120

[tool.mypy]
plugins = ["mypy_django_plugin.main"]

[tool.django-stubs]
django_settings_module = "my-project.settings"

[tool.pyright]
# Ignore Django migrations
exclude = [
  "**/migrations"
]