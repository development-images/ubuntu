## Base on Ubuntu Jammy
FROM ubuntu:jammy

## Set maintainer label
LABEL maintainer="Chris <git@gbe0.com>"

## Configure the default apt mirror for package installations
ARG APT_MIRROR="http://archive.ubuntu.com/ubuntu/"

## Configure the PyPy3 archive to download/install
ARG PYPY3="https://downloads.python.org/pypy/pypy3.9-v7.3.9-linux64.tar.bz2"

## The node major release to install
ARG NODE_VERSION="18"

## Configure default user ID and group ID that will be used for VS Code
ARG UID=1000
ARG GID=$UID

## Configure LANG, LC_ALL and LANGUAGE environment vars to prevent various errors
ENV LANG="C.UTF-8" LC_ALL="C.UTF-8" LANGUAGE="C.UTF-8"

## Update sources list and run system upgrade
RUN echo \
      ### Update current sources list and install lsb_release and gpg utility
      && apt-get update \
      && DEBIAN_FRONTEND="noninteractive" apt-get -q -y install \
        lsb-release gpgv \
      ### Configure package sources list
      && echo "deb ${APT_MIRROR} $(lsb_release -sc) main restricted" > /etc/apt/sources.list \
      && echo "deb ${APT_MIRROR} $(lsb_release -sc)-updates main restricted" >> /etc/apt/sources.list \
      && echo "deb ${APT_MIRROR} $(lsb_release -sc) universe" >> /etc/apt/sources.list \
      && echo "deb ${APT_MIRROR} $(lsb_release -sc)-updates universe" >> /etc/apt/sources.list \
      && echo "deb ${APT_MIRROR} $(lsb_release -sc) multiverse" >> /etc/apt/sources.list \
      && echo "deb ${APT_MIRROR} $(lsb_release -sc)-updates multiverse" >> /etc/apt/sources.list \
      && echo "deb ${APT_MIRROR} $(lsb_release -sc)-backports main restricted universe multiverse" >> /etc/apt/sources.list \
      && echo "deb ${APT_MIRROR} $(lsb_release -sc)-proposed main restricted universe multiverse" >> /etc/apt/sources.list \
      && echo "deb http://archive.canonical.com/ubuntu $(lsb_release -sc) partner" >> /etc/apt/sources.list \
      && echo "deb http://security.ubuntu.com/ubuntu/ $(lsb_release -sc)-security main restricted" >> /etc/apt/sources.list \
      && echo "deb http://security.ubuntu.com/ubuntu/ $(lsb_release -sc)-security universe" >> /etc/apt/sources.list \
      && echo "deb http://security.ubuntu.com/ubuntu/ $(lsb_release -sc)-security multiverse" >> /etc/apt/sources.list \
      ### To add source package lists, uncomment the below lines
      # && echo "deb-src ${APT_MIRROR} $(lsb_release -sc) main restricted" >> /etc/apt/sources.list \
      # && echo "deb-src ${APT_MIRROR} $(lsb_release -sc)-updates main restricted" >> /etc/apt/sources.list \
      # && echo "deb-src ${APT_MIRROR} $(lsb_release -sc) universe" >> /etc/apt/sources.list \
      # && echo "deb-src ${APT_MIRROR} $(lsb_release -sc)-updates universe" >> /etc/apt/sources.list \
      # && echo "deb-src ${APT_MIRROR} $(lsb_release -sc) multiverse" >> /etc/apt/sources.list \
      # && echo "deb-src ${APT_MIRROR} $(lsb_release -sc)-updates multiverse" >> /etc/apt/sources.list \
      # && echo "deb-src ${APT_MIRROR} $(lsb_release -sc)-backports main restricted universe multiverse" >> /etc/apt/sources.list \
      # && echo "deb-src ${APT_MIRROR} $(lsb_release -sc)-proposed main restricted universe multiverse" >> /etc/apt/sources.list \
      # && echo "deb-src http://archive.canonical.com/ubuntu $(lsb_release -sc) partner" >> /etc/apt/sources.list \
      # && echo "deb-src http://security.ubuntu.com/ubuntu/ $(lsb_release -sc)-security main restricted" >> /etc/apt/sources.list \
      # && echo "deb-src http://security.ubuntu.com/ubuntu/ $(lsb_release -sc)-security universe" >> /etc/apt/sources.list \
      # && echo "deb-src http://security.ubuntu.com/ubuntu/ $(lsb_release -sc)-security multiverse" >> /etc/apt/sources.list \
      ### Update package cache
      && apt-get update \
      ### Configure apt to retry downloads if there is a failure
      && echo 'APT::Acquire::Retries "3";' > /etc/apt/apt.conf.d/80-retries \
      ### Perform full system upgrade
      && DEBIAN_FRONTEND="noninteractive" apt-get -q -y dist-upgrade

## Install development related tools
RUN echo \
      ### Install useful command line utilities
      && apt-get update \
      && DEBIAN_FRONTEND="noninteractive" apt-get -q -y install \
        vim neovim less strace curl wget screen telnet git tmux dnsutils jq net-tools \
        iputils-ping bash-completion sudo tcptraceroute mlocate \
      ### Install language servers and other utilities for vscode extensions to work
      && DEBIAN_FRONTEND="noninteractive" apt-get -q -y install \
        #### Shell
        shellcheck \
        #### Python
        python3 python3-venv \
        #### Java for Sonarlint
        openjdk-11-jdk-headless \
        #### Build-essential to build python extensions
        build-essential \
      ### Install zsh
      && DEBIAN_FRONTEND="noninteractive" apt-get -q -y install \
        zsh zsh-syntax-highlighting \
      ### Set default python version to 3
      && update-alternatives --install /usr/bin/python python /usr/bin/python3 1 \
      ### Create nvim config directory
      && mkdir -p /root/.config/nvim

## Add editor configuration files
COPY vimrc /root/.vimrc
COPY neovimrc /root/.config/nvim/init.vim

## Install Node
RUN echo \
      ### Install requirements
      && apt-get update \
      && DEBIAN_FRONTEND="noninteractive" apt-get -q -y install \
        apt-transport-https gnupg \
      ### Trust the node.js GPG key
      && wget -qO- https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - \
      ### Add the package repository
      && echo "deb https://deb.nodesource.com/node_${NODE_VERSION}.x $(lsb_release -sc) main" > /etc/apt/sources.list.d/nodesource.list \
      ### Update package sources
      && apt-get update \
      ### Install Node
      && DEBIAN_FRONTEND="noninteractive" apt-get -q -y install \
        nodejs

## Install Ansible
RUN echo \
      ### Trust the Ansible PPA GPG key
      && wget -qO- "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x6125e2a8c77f2818fb7bd15b93c4a3fd7bb9c367" | apt-key add - \
      ### Add the package repository
      && echo "deb https://ppa.launchpadcontent.net/ansible/ansible/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ansible.list \
      ### Update package sources
      && apt-get update \
      ### Install requirements
      && apt-get update \
      && DEBIAN_FRONTEND="noninteractive" apt-get -q -y install \
        ansible \
      ### Symlink to volume in Docker
      && rm -rf /etc/ansible \
      && sudo ln -s /code/ansible /etc/ansible

## Configure the user that VS Code will run as
RUN echo \
      ### Add user and group
      && groupadd --gid ${GID} vscode \
      && useradd --uid ${UID} --gid ${GID} -s /bin/zsh -m vscode \
      ### Create directories for extensions that are installed by VS Code
      && mkdir -p /home/vscode/.vscode-server /home/vscode/.vscode-server-insiders \
      ### Copy vim config from root user
      && cp /root/.vimrc /home/vscode/.vimrc \
      ### Copy neovim config from root user
      && cp -R /root/.config /home/vscode/.config \
      ### Fix permissions on home directory
      && chown -R ${UID}:${GID} /home/vscode \
      ### Add sudo configuration to allow no password access for vscode user
      && echo vscode ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/vscode \
      && chmod 0440 /etc/sudoers.d/vscode \
      ### Add work around for error with sudo 1.8.31
      ### https://github.com/sudo-project/sudo/issues/42
      ### Without this fix, every sudo command gives this error:
      ###   sudo: setrlimit(RLIMIT_CORE): Operation not permitted
      && echo "Set disable_coredump false" >> /etc/sudo.conf

## Switch to the VS Code user
USER vscode

## Add the bash aliases file
COPY .bash_aliases /home/vscode/.bash_aliases

## Set env variable to make git easier to work with when using SSH
ENV GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

## Install oh-my-zsh
RUN echo \
      && bash -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"

## Add the zsh configuration file
COPY .zshrc /home/vscode/.zshrc

## Add the tmux configuration file
COPY .tmux.conf /home/vscode/.tmux.conf

## Add the SSH config
RUN mkdir /home/vscode/.ssh
COPY .ssh_config /home/vscode/.ssh/config

## Fix zshrc permissions
RUN sudo chown vscode:vscode /home/vscode/.zshrc

## Update $PATH to work with locally installed binaries
ENV PATH="/home/vscode/.local/bin:${PATH}"

## Install conda (comes with Python 3)
RUN echo \
      ### Run the install script
      && wget -qO /tmp/miniconda-install.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh \
      && bash /tmp/miniconda-install.sh -b -p /home/vscode/conda \
      && rm -f /tmp/miniconda-install.sh \
      ### Upgrade conda
      && /home/vscode/conda/bin/conda update conda -q -y \
      ### Setup shell
      && /home/vscode/conda/bin/conda init bash \
      && /home/vscode/conda/bin/conda init zsh \
      ### Don't enable conda environment by default
      && /home/vscode/conda/bin/conda config --set auto_activate_base false

## Install Conda environments
RUN echo \
      ### Main python env
      && /home/vscode/conda/bin/conda create -q -y -n python3.10 python=3.10 \
      ### PyPy3
      && /home/vscode/conda/bin/conda config --add channels conda-forge \
      && /home/vscode/conda/bin/conda config --set channel_priority strict \
      && /home/vscode/conda/bin/conda create -q -y -n pypy3 pypy

## Install additional oh-my-zsh plugins
RUN echo \
      && git clone https://github.com/esc/conda-zsh-completion /home/vscode/.oh-my-zsh/custom/plugins/conda-zsh-completion

## Set the work directory
WORKDIR /code